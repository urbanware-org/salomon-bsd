
USAGE (salomon.sh)

    Contents:

        1.  Definition
        2.  General stuff
          2.1  Overview of all command-line arguments
          2.2  Shell requirements
          2.3  Colorize and highlight certain lines
             2.3.1  Color config files
             2.3.2  Highlight filter terms
             2.3.3  Highlight whole lines
             2.3.4  No colorization and hightlighting
          2.4  Config file paths
          2.5  File paths containing certain characters
             2.5.1  Whitespaces
             2.5.2  Quotation marks
             2.5.3  Backslashes
          2.6  Interactive dialogs
          2.7  Limitations
             2.7.1  OpenBSD
        3.  Processing an input file
          3.1  Relevant keystrokes
          3.2  Monitor the file
          3.3  Analyze the file
          3.4  Multiple input files
          3.5  Non-existent input file path
        4.  Applying a filter
          4.1  Filter pattern
          4.2  Filter config file
        5.  Exclude lines
        6.  Remove certain strings
        7.  Head and tail feature
          7.1  Head feature
          7.2  Tail feature
        8.  Pause output
        9.  Export output into a file

    1. Definition

        Monitor and analyze log and plain text files with various filter and
        highlighting features.

    2. General stuff

        2.1 Overview of all command-line arguments

            The script requires command-line arguments to operate. You can get
            an overview of all arguments available, by simply running the main
            script with the '--help' argument:

                ./salomon.sh --help

        2.2 Shell requirements

            The Salomon project was developed on (and for) the Bash shell,
            which is the default shell on many Unix-like systems (or at least
            on many Linux distributions).

            No matter which shell you are using, the Bash shell (version 4 or
            higher) must be installed in order to use the project.

            Further information can be found inside the included documentation
            for the shell compatibility script.

        2.3 Colorize and highlight certain lines

            In first place, Salomon has been developed to monitor and analyze
            files by colorizing lines which contain certain terms (which can
            also be highlighted) to get a fast overview of the contents (for
            example to easily detect error messages inside log files).

            2.3.1 Color config files

                Inside the 'colors' sub-directory there is a sample color
                config file named 'sample_colors.cfg'. It can be used to
                colorize lines containing certain terms with user-defined
                colors. This sample config file also contains some simple
                usage examples how to do this.

            2.3.2 Highlight filter terms

                The '--highlight-matches' command-line argument allows to
                additionally highlight the filter terms inside the
                corresponding lines (if a filter was given) by inverting
                their colors (sort of marker pen like). It can be used with
                and without a color config.

                You may also use '--highlight-upper', which works the same way
                and additionally switches the letters of the filter terms to
                uppercase. However, this does not work on OpenBSD. See section
                2.7.1 for details.

            2.3.3 Highlight whole lines

                Instead of only highlighting the filter terms, you can also
                highlight the whole line using '--highlight-all'. This does
                neither require a color config nor a filter.

            2.3.4 No colorization and hightlighting

                If you do not need any colorization and highlighting, you may
                use the native shell commands and tools such as 'cat', 'grep'
                and 'tail' instead which are faster and usually already
                installed by default.

        2.4 Config file paths

            Since version 1.1.1 you do not have to give the full path to the
            config files for Salomon if these are located in the corresponding
            sub-directories.

            So, in case you only give the file name (instead of the path) for
            the color or filter config like this:

                ./salomon.sh -a monitor -i /tmp/foobar.log -c colors.cfg \
                             -f filter.cfg

            Salomon will first check the current working directory for these
            config files. If these do not exist there, it will check for them
            inside the config sub-directories ('colors' and 'filters') of the
            Salomon script directory.

        2.5 File paths containing certain characters

            Paths which contain spaces must either be enclosed with (single or
            or double) quotes or given with escaped whitespaces.

            Escaping also applies to special characters such as quotes or
            backslashes inside the file name.

            Due to the fact, that backslashes are escape characters, it is
            most unlikely that a file path contains one.

            Below you can find a few examples of escaped characters.

            2.5.1 Whitespaces

                Single space:

                    File path:  /tmp/server mails.log
                    Escaped:    /tmp/server\ mails.log

                Multiple spaces:

                    File path:  /tmp/server user logins.log
                    Escaped:    /tmp/server\ user\ logins.log

                Multiple spaces (consecutively):

                    File path:  /tmp/server   user logins.log
                    Escaped:    /tmp/server\ \ \ user\ logins.log

            2.5.2 Quotation marks

                Single quotes:

                    File path:  /tmp/output of 'tail'.log
                    Escaped:    /tmp/output\ of\ \'tail\'.log

                Double quotes:

                    File path:  /tmp/output of "tail".log
                    Escaped:    /tmp/output\ of\ \"tail\".log

            2.5.3 Backslashes

                Most unlikely, but just in case:

                    File path:  /tmp/foo\bar.log
                    Escaped:    /tmp/foo\\bar.log

        2.6 Interactive dialogs

            Since version 1.9.0 you can use interactive dialogs instead of or
            in combination with command-line arguments by giving either the
            '--dialogs' or '--interactive' argument:

                ./salomon.sh --dialogs

            However, if you give further arguments like this

                ./salomon.sh --dialogs -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg

            the values will be automatically applied to the dialogs. For
            example, the dialog window asking for the input file will already
            contain '/tmp/foobar.log', which can still be changed.

            Salomon supports the dialog programs 'dialog' and 'whiptail'. You
            can set the one you want to use inside the 'salomon.cfg' file.

            Furthermore, you can set which dialogs should be shown when using
            interactice mode. For example, if you want to disable the welcome
            dialog, edit 'salomon.cfg' and change the value of the option

                dialog_show_welcome=1

            to the following:

                dialog_show_welcome=0

        2.7 Limitations

            2.7.1 OpenBSD

                Unlike in FreeBSD or NetBSD, the 'sed' command provided by
                default in OpenBSD does not support the 'i' (ignore case)
                flag.

                Due to this, there are some limitations (or differences) which
                however only affect the '--highlight-upper' feature as well as
                the '--remove' feature in combination with the '--ignore-case'
                argument.

                Remove feature:

                    The '--ignore-case' argument works with filter and exclude
                    patterns, but does not have any effect with the '--remove'
                    argument. So, the remove pattern is always case-sensitive
                    here.

                Highlight with uppercase:

                    When using '--highlight-upper', the whole line will be
                    switched to uppercase instead of just the highlighted
                    term.

                    In case the '--remove' argument is also given, the pattern
                    is automatically applied in uppercase for those lines.

    3. Processing input file

        The following examples use a color config file. See section 2.3 for
        details.

        3.1 Relevant keystrokes

            The Salomon process (no matter if monitoring or analyzing) can be
            canceled at any time by pressing the universal and well-known
            <Ctrl>+<C> keystroke.

            Furthermore, the Bash shell also provides built-in keystrokes to
            pause ("freeze") the output and, of course, to resume again.
            Notice that they are part of the Bash.

            By pressing <Ctrl>+<S> the output freezes until defreezing it
            again using <Ctrl>+<Q> or <Return>.

            Salomon also provides an optional pause feature based on the
            number of output lines, see section 8 below.

        3.2 Monitor the file

            This feature uses the follow mode of the 'tail' utility to return
            the lines of the file and colorizes the output with user-defined
            colors. The file will be monitored until the user cancels the
            process.

            For example, if you want to monitor the file '/tmp/foobar.log'
            using the file '/tmp/colors.cfg' to colorize certain lines, type:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg

            Alternatively, you can also give the '--monitor' command-line
            argument instead of '-a monitor'.

        3.3 Analyze the file

            Instead of monitoring a file, it is also possible to analyze it.
            This will simply return its lines and colorize certain of them,
            then exit.

            For example, if you want to analyze the file '/tmp/foobar.log'
            using the file '/tmp/colors.cfg' to colorize certain lines, type:

                ./salomon.sh -a analyze -i /tmp/foobar.log \
                             -c /tmp/colors.cfg

            Alternatively, you can also give the '--analyze' command-line
            argument instead of '-a analyze'.

        3.4 Multiple input files

            You can also provide multiple (two or more) input files at once.

            For example, if you want to monitor the files '/tmp/foo.log' and
            and '/tmp/bar.log' using the file '/tmp/colors.cfg' to colorize
            certain lines, type:

                ./salomon.sh -a monitor -i /tmp/foo.log -i /tmp/bar.log \
                             -c /tmp/colors.cfg

        3.5 Non-existent input file path

            In case a given input file path does not exist, Salomon also
            checks the default log file path '/var/log' for the file.

            For example, if you execute the following command

                ./salomon.sh -a monitor -i foo.log -c /tmp/colors.cfg

            and the file 'foo.log' does not exist inside the current working
            directory, Salomon also checks for '/var/log/foo.log'. If that
            file exists, it will be monitored.

    4. Applying a filter

        The following examples use a color config file. See section 2.3 for
        details.

        It is possible to filter the output to e.g. only return lines that
        contain certain terms. There is also the optional '--ignore-case'
        command-line argument to ignore the case of the given filter pattern.

        The '--ignore-case' argument does not have any effect on OpenBSD. See
        section 2.7.1 for details.

        The filter pattern also allows spaces, including leading and trailing
        ones.

        4.1 Filter pattern

            For example, to only return lines that contain the term "error",
            you can use the filter argument as follows:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg -f error

            The pattern also allows spaces, but when using spaces the criteria
            must be enclosed either with single (') or double (") quotes, for
            example:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg -f "error while"

            This will return lines that contain the term "error while", but no
            lines which contain only one of those words.

            In case this does not work properly, you may try escaping the
            space (or all of them if there are multiple) using a backslash
            like this:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg -f "error\ while"

            Furthermore, the pattern allows multiple terms. These must be
            separated with semicolons and be enclosed either with single (')
            or double (") quotes, for example:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg -f "error;warning;success"

            This will return lines that contain one of those terms.

            A combination of spaces and multiple terms inside the pattern also
            is supported:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg \
                             -f "error while;warning;success"

        4.2 Filter config file

            Even though, the help output of the script returns that the filter
            argument expects a pattern, it is also possible to give a config
            file containing the pattern.

            Inside the 'filters' sub-directory there is a sample filter config
            file named 'sample_filter.cfg'. This file contains usage examples
            how to filter the output.

            For example, to use the file '/tmp/filter.cfg' as filter pattern,
            type:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg -f /tmp/filter.cfg

            Please notice that in case the file does not exist, the script
            will interpret the given path as a pattern instead of a file path.

    5. Exclude lines

        For example, to exclude all lines containing the string "example",
        type:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -e example

        The exclude pattern also allows spaces, including leading and trailing
        ones. When using spaces, the string must be enclosed either with
        single (') or double (") quotes, for example:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -e "example for"

        This will exclude lines that contain the term "example for", but no
        lines which contain only one of those words.

        In case this does not work properly, you may try escaping the space
        (or all of them if there are multiple) using a backslash like this:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -e "example\ for"

        Furthermore, the pattern allows multiple exclude terms. These must be
        separated with semicolons and be enclosed either with single (') or
        double (") quotes, for example:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -e "example;foo;bar"

        This will exclude lines that contain one of those terms.

        A combination of spaces and multiple terms inside the exclude pattern
        also is supported:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -e "example for;foo;bar"

    6. Remove certain strings

        For example, to remove the string "example" from all output lines,
        type:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -r example

        The remove pattern also allows spaces, including leading and trailing
        ones. When using spaces, the string must be enclosed either with
        single (') or double (") quotes, for example:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -r "example for"

        This will remove the string "example for", but not just one of those
        words.

        In case this does not work properly, you may try escaping the space
        (or all of them if there are multiple) using a backslash like this:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -r "example\ for"

        Furthermore, the pattern allows multiple remove terms. These must be
        separated with semicolons and be enclosed either with single (') or
        double (") quotes, for example:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -r "example;foo;bar"

        This will remove all of the given terms from the corresponding lines.

        A combination of spaces and multiple terms inside the remove pattern
        also is supported:

            ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                         -r "example for ;foo;bar"

    7. Head and tail feature

        Notice that both features do not work with multiple input files.

        7.1 Head feature

            When analyzing large files it may take a while until the whole
            file has been printed on the output. For example, if you just
            need the first 30 lines of a log file, you can use the '--head'
            command-line argument:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg --head 30

        7.2 Tail feature

            When analyzing large files it may take a while until the whole
            file has been printed on the output. For example, if you just
            need the last 30 lines of a log file, you can use the '--tail'
            command-line argument:

                ./salomon.sh -a monitor -i /tmp/foobar.log \
                             -c /tmp/colors.cfg --tail 30

    8. Pause output

        When analyzing large files, the output can be very cluttered. With
        the '--pause' argument you can pause the output either after user-
        defined amount of lines or automatically by determining the number
        of lines of the terminal Salomon is currently running in.

        For example, to pause the output after 30 lines, the command would
        look like this:

            ./salomon.sh -a monitor -i /tmp/foobar.log --pause 30

        When you give 'auto' instead of a number, Salomon determines the
        height of the terminal (number of lines) and pauses based on that
        value.

            ./salomon.sh -a monitor -i /tmp/foobar.log --pause auto

        When the corresponding number of lines is reached, a typical "Press
        any key to continue" message appears. As this already suggests, the
        output continues after pressing a key.

        The Return and Enter keys have a different behavior than the others.
        If you press one of them, the previous "Press any key to continue"
        prompt will be kept.

        However, you should avoid pressing certain keys such as the delete
        key, arrow keys, F-keys and the right-click keyboard shortcut, as this
        will result in skipping pauses.

    9. Export output into a file

        Since version 1.9.6 you can simultaneously write the output of Salomon
        into a file including the colors and highlighting.

        The purpose of this feature is that you have an exact copy of the
        relevant output displayed on the screen without requiring the original
        log file and the appropriate Salomon command-line arguments.

        For example, to export the output of the following command

            ./salomon.sh -a monitor -i /tmp/foobar.log \
                           -c /tmp/colors.cfg -f /tmp/filter.cfg

        into the file '/tmp/export.log', the command would like this:

            ./salomon.sh -a monitor -i /tmp/foobar.log \
                           -c /tmp/colors.cfg -f /tmp/filter.cfg \
                           --export-file /tmp/export.log

        Now, by using e.g. 'cat' you can display the exported data as seen in
        the output of Salomon. However, editing the file with an editor will
        not work, due to the fact, that the editor will (or should) also print
        the color and highlighting codes instead of interpreting them.

